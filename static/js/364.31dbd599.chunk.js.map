{"version":3,"file":"static/js/364.31dbd599.chunk.js","mappings":"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","sources":["components/ContactList/ContactListStyled.js","components/Contact/ContactStyled.js","components/Contact/Contact.jsx","redux/contacts/contacts.selectors.js","components/ContactList/ContactList.jsx","components/Filter/FilterStyled.js","components/Filter/Filter.jsx","components/AddContactForm/AddContactFormStyled.js","components/AddContactForm/AddContactForm.jsx","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ContactListStyled = styled.ul`\n  list-style: none;\n  display: flex;\n  gap: 20px;\n  flex-wrap: wrap;\n  padding-left: 0;\n  margin: 0;\n`;\n","import { styled } from 'styled-components';\n\nexport const ContactStyled = styled.li`\n  display: flex;\n  justify-content: space-between;\n  border: 1px solid #aaa;\n  border-radius: 10px;\n  min-width: 300px;\n  padding: 5px;\n  div {\n    flex-grow: 1;\n    div {\n      display: flex;\n      align-items: baseline;\n    }\n  }\n\n  p {\n    margin: 0;\n  }\n  span {\n    flex-grow: 1;\n    text-align: center;\n    font-weight: bold;\n  }\n\n  button {\n    /* align-self: flex-end; */\n    /* max-width: fit-content; */\n\n    padding: 5px;\n    border: 1px solid #aaa;\n    border-radius: 10px;\n    cursor: pointer;\n    transition: background-color cubic-bezier(0.4, 0, 0.2, 1) 250ms;\n\n    &:focus,\n    &:hover {\n      background-color: #2196f3;\n    }\n  }\n`;\n","import PropTypes from 'prop-types';\n\nimport { ContactStyled } from './ContactStyled';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/contacts.thunk';\n\nexport const Contact = ({ contact: { id, name, number } }) => {\n  const dispatch = useDispatch();\n\n  const handelDelete = () => dispatch(deleteContact(id));\n\n  return (\n    <ContactStyled>\n      <div>\n        <div>\n          <p>Name:</p>\n          <span>{name}</span>\n        </div>\n        <div>\n          <p>Number:</p>\n          <span>{number}</span>\n        </div>\n      </div>\n\n      <button type=\"button\" onClick={handelDelete}>\n        delete\n      </button>\n    </ContactStyled>\n  );\n};\n\nContact.propType = {\n  contact: PropTypes.exact({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    phone: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const selectContacts = (state)=> state.contacts.items;\nexport const selectIsLoading = (state)=>state.contacts.isLoading;\nexport const selectError = (state)=>state.contacts.error;\nexport const selectFilter = (state)=>state.filter;\n\nexport const selectFilteredContacts= createSelector([selectContacts, selectFilter], \n    (contacts, filter)=> contacts.filter(contact =>\n        contact.name.toLowerCase().includes(filter.toLowerCase())\n      )\n);","\nimport { ContactListStyled } from './ContactListStyled';\nimport { Contact } from 'components/Contact/Contact';\nimport { selectFilteredContacts } from 'redux/contacts/contacts.selectors';\nimport { useSelector } from 'react-redux';\n\nexport const ContactList = () => {\n  \n  const contacts = useSelector(selectFilteredContacts);\n    \n  return (\n    <ContactListStyled>\n      {contacts.map(contact => (\n        <Contact key={contact.id} contact={contact} />\n      ))}\n    </ContactListStyled>\n  );\n};","import styled from 'styled-components';\n\nexport const FilterStyled = styled.label`\n  margin-top: 20px;\n  display: flex;\n\n  flex-direction: column;\n\n  input {\n    width: 300px;\n    border: 1px solid #aaa;\n    border-radius: 10px;\n    padding: 10px;\n\n    outline: none;\n    cursor: pointer;\n    transition: border-color cubic-bezier(0.4, 0, 0.2, 1) 250ms;\n    &:focus,\n    &:hover {\n      border-color: #2196f3;\n    }\n  }\n`;\n","import { FilterStyled } from './FilterStyled';\nimport { useDispatch, useSelector } from 'react-redux';\n// import { setFilter } from 'components/Redux/actions';\nimport { selectFilter } from 'redux/contacts/contacts.selectors';\nimport { setFilter } from 'redux/filter/filter.slice';\n\nexport const Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n  \n  const handelChange = (e)=> dispatch(setFilter(e.target.value));\n  \n  \n  return (\n    <FilterStyled>\n      Find contacts by name\n      <input\n        onChange={handelChange}\n        value={filter}\n        type=\"text\"\n        name=\"filter\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      />\n    </FilterStyled>\n  );\n};\n","import styled from 'styled-components';\n\nexport const AddContactFormStyled = styled.form`\n  border: 1px solid #aaa;\n  border-radius: 10px;\n  padding: 10px;\n  display: flex;\n  flex-direction: column;\n  width: 300px;\n\n  label {\n    padding: 10px 0;\n    display: flex;\n    gap: 10px;\n    align-items: baseline;\n  }\n  input {\n    border: 1px solid #aaa;\n    border-radius: 10px;\n    padding: 10px;\n    width: 100%;\n    outline: none;\n    cursor: pointer;\n    transition: border-color cubic-bezier(0.4, 0, 0.2, 1) 250ms;\n    &:focus,\n    &:hover {\n      border-color: #2196f3;\n    }\n  }\n\n  button {\n    padding: 10px;\n    border: 1px solid #aaa;\n    border-radius: 10px;\n    cursor: pointer;\n    transition: background-color cubic-bezier(0.4, 0, 0.2, 1) 250ms;\n    &:focus,\n    &:hover {\n      background-color: #2196f3;\n    }\n  }\n`;\n","import React, { useState } from 'react';\nimport { AddContactFormStyled } from './AddContactFormStyled';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/contacts.selectors';\nimport { addContact } from 'redux/contacts/contacts.thunk';\n\nconst INITIAL_STATE = {\n  name: '',\n  number: '',\n};\n\nexport const AddContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n  const [state, setState] = useState(INITIAL_STATE);\n\n  // state = { ...INITIAL_STATE };\n\n  const handelChange = e => {\n    setState({ ...state, [e.target.name]: e.target.value });\n  };\n\n  const handelSubmit = e => {\n    const { name, number } = state;\n    e.preventDefault();\n\n    if (contacts.some(contact => contact.name === name)) {\n      Notify.failure(`${name} is already in contacts`);\n      return;\n    }\n    dispatch(addContact({ name, number }));\n    Notify.success(`Contact ${name} added successfully`);\n    setState(INITIAL_STATE);\n  };\n\n  return (\n    <AddContactFormStyled onSubmit={handelSubmit}>\n      <label>\n        Name\n        <input\n          onChange={handelChange}\n          value={state.name}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n      <label>\n        Number\n        <input\n          onChange={handelChange}\n          value={state.number}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </label>\n      <button type=\"submit\">Add contact</button>\n    </AddContactFormStyled>\n  );\n};\n","import { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { AddContactForm } from 'components/AddContactForm/AddContactForm';\nimport { Loading } from 'components/Loading/Loading';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectContacts,\n  selectError,\n  selectFilteredContacts,\n  selectIsLoading,\n} from 'redux/contacts/contacts.selectors';\nimport { fetchContacts } from 'redux/contacts/contacts.thunk';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const contacts = useSelector(selectContacts);\n  const filteredContacts = useSelector(selectFilteredContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  return (\n    <>\n      <AddContactForm />\n      {!!contacts?.length && <Filter />}\n      {(isLoading && !error && !!filteredContacts?.length && (\n        <h2>\n          Contacts <Loading />\n        </h2>\n      )) ||\n        (isLoading && !error && (\n          <h2>\n            <Loading />\n          </h2>\n        )) ||\n        (!!filteredContacts?.length && <h2>Contacts</h2>)}\n\n      <ContactList />\n    </>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["ContactListStyled","styled","ContactStyled","Contact","contact","id","name","number","dispatch","useDispatch","type","onClick","deleteContact","propType","PropTypes","phone","isRequired","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilter","filter","selectFilteredContacts","createSelector","toLowerCase","includes","ContactList","useSelector","map","FilterStyled","Filter","onChange","e","setFilter","target","value","pattern","title","required","AddContactFormStyled","INITIAL_STATE","AddContactForm","useState","setState","handelChange","onSubmit","preventDefault","some","Notify","addContact","useEffect","fetchContacts","filteredContacts","length","Loading"],"sourceRoot":""}